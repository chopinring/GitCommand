1.配置标识（Git用邮箱和用户名作为一个标识）
  git config --global user.name "xxxxxx"
  git config --global user.email "xxx@xxx.com"

2.创建版本库（把当前目录变成可管理的仓库 会增加一个.git目录）
  git init

3.添加文件到版本库的暂存区(完整文件名)
  git add xxx.txt

4.提交文件到版本库
  git commit -m "这里是注释信息。"
  git commit -a -m "删除文件后提交的备注信息"
  ********* commit提供了一个--amend参数，可以修改最后一次提交的信息*********
  git commit -amend "修改过后的备注信息"
  ********* 但是如果已经push过了，就没有用了 *********

5.查看是否存在文件还未提交
  git status

6.查看文件修改的内容
  git diff readme.txt

7.查看历史提交记录(详细信息)
  git log

8.查看历史提交记录（单行显示）
  git log --pretty=oneline

9.获取版本号
  git reflog

10.回退到上一个版本(回退上一个版本用一个^,上上个版本用^^，以此类推；或者直接用数字进行指定。)
  git reset --hard HEAD^
  git reset --hard HEAD~1


11.回退到指定版本号的版本
  git reset --hard 6fcfc89

12.撤销对文件的修改(情况一：如果未add到暂存区，则撤销后和版本库中文件一样；情况二：如果add到暂存区后再修改，则回到add到暂存区后的状态。)
  git checkout --readme.txt
  **********如果没有--的话，则表示切换到对应的分支*************

13.删除文件（可以直接在文件目录删除文件,执行commit后彻底从版本库删除)
  git rm readme.txt 
  **********在commit之前都可以用git checkout -- readme.txt 进行恢复***********

14.创建SSH Key(会创建id_rsa和id_rsa.pub，前者是私钥，后者是公钥。)
  ssh-keygen -t rsa -C "youremail@example.com"

15.推送本地库的内容到远程库（实质：把当前分支推送到远程，默认为master）
  git remote add origin https://www.github.com/chopinring/JS_Project
  git push -u origin master 
  **********第一次推送时需要加上 -u 参数，把远程库和本地库关联起来，后续推送则不需要**********
  **********第一次推送时还需要输入用户名和密码进行验证***********

16.把远程库克隆到本地库
  git clone https://www.github.com/chopinring/JS_Project

17.创建分支
  git branch branchName

18.合并分支(在另一个分支上面执行，如在master上。)
  git merge branchName

19.创建并切换分支
  git checkout -b branchName
  **********等价于git branch branchName 和 git checkout branchName **********

## 更新远程代码到本地仓库--方法一（20-23）
20.查看远程仓库
  git remote -v

21.从远程库获取最新版本到本地
  git fetch origin master

22.比较本地库和远程库的区别
  git log -p master.. origin/master

23.把远程下载下来的代码合并到本地仓库
  git merge origin/master


## 更新远程代码到本地仓库--方法二（24-27）
24.查看远程仓库
  git remote -v

25.从远程获取最新代码到本地(从远程的origin仓库的master分支下载到本地并新建一个分支temp)
  git fetch origin master:temp

26.比较本地的仓库和远程仓库的区别(比较master分支和temp分支的不同)
  git diff temp

27.合并temp分支到master分支
  git merge temp
  *********如果不想要这个temp分支了，可以利用 git branch -d temp 删除这个分支***********
  *********如果该分支没有合并到主分支，可以利用 git branch -D temp 强制删除这个分支***********

## Git pull命令详解（28-32）
  ********* git pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并************
28.pull的基本使用方法（取回origin主机的next分支，与本地的master分支合并）
  git pull <远程主机名> <远程分支名>:<本地分支名>
  git pull origin next:master

29.如果远程分支是与当前分支合并，则冒号后面的部分可以省略。
  git pull origin next

30.pull命令表示，取回origin/next分支，再与当前分支合并（等同于先做git fetch，再做git merge）。
  git fetch origin
  git merge origin/next

31.指定master分支追踪origin/next分支(tracking)。
  git branch --set-upstream master origin/next
  ********** 在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，本地的master分支自动”追踪”origin/master分支。***********
  ********** Git也允许手动建立追踪关系。***********

32.本地的当前分支自动与对应的origin主机”追踪分支”(remote-tracking branch)进行合并。
  # 32-1.如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。
  git pull origin
  
  # 32-2.如果当前分支只有一个追踪分支，连远程主机名都可以省略(即当前分支自动与唯一一个追踪分支进行合并)。
  git pull

  # 32-3.如果合并需要采用rebase模式，可以使用–rebase选项。
  git pull --rebase <远程主机名> <远程分支名>:<本地分支名>
